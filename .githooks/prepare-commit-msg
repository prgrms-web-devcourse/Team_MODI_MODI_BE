#!/bin/bash

Font_RED='\033[91m'
Font_CLEAR='\033[0m' # No Color


PREFIX_LIST=( 
 [FEAT]=1
 [REFACTOR]=1
 [TEST]=1
 [DOCS]=1
 [Chore]=1
)

if [ -z "$BRANCHES_TO_SKIP" ]; then
  BRANCHES_TO_SKIP=("main" "develop" "release" "hotfix")
fi

BRANCH_NAME=$(git symbolic-ref --short HEAD)
BRANCH_NAME="${BRANCH_NAME##*/}"
JIRA_ID=$(echo "$BRANCH_NAME" | grep -E -o '^\w+-[0-9]+')
JIRA_ID=$(echo "$JIRA_ID" | tr '[:lower:]' '[:upper:]')

COMMIT_MESSAGE="$(cat $1)"

PREFIX=$(echo "$COMMIT_MESSAGE" | cut -d ':' -f1 | sed 's/ *$//g')
MESSAGE=$(echo "$COMMIT_MESSAGE" | cut -d ':' -f2)

BRANCH_EXCLUDED=$(printf "%s\n" "${BRANCHES_TO_SKIP[@]}" | grep -c "^$BRANCH_NAME$")
BRANCH_IN_COMMIT=$(grep -c "$JIRA_ID" "$1")

TICKET=[$(git rev-parse --abbrev-ref HEAD | grep -Eo '^(\w+/)?(\w+[-_ ])?[0-9]+' | grep -Eo '(\w+[-])?[0-9]+' | tr "[:lower:]" "[:upper:]")]

if [[ $TICKET == "[]" || "$COMMIT_MESSAGE" == "$TICKET"* ]];then
  exit 0;
fi

if ! [[ "$COMMIT_MESSAGE" =~ ":" ]];then
    printf "${Font_RED}Prefix 구분을 위해 : (세미콜론)이 필요합니다.${Font_CLEAR}\n"
    exit 1
fi

if [[ -z ${PREFIX_LIST[$PREFIX]} ]]; then
    printf "${Font_RED}[${PREFIX}] 는 존재 하지 않는 Prefix 입니다.${Font_CLEAR}\n"
    echo  "사용가능한 Prefix 목록"
    printf '%s\n' "${!PREFIX_LIST[@]}"
    exit 1
fi

if [ -n "$JIRA_ID" ] && ! [[ $BRANCH_EXCLUDED -eq 1 ]] && ! [[ $BRANCH_IN_COMMIT -ge 1 ]]; then
  echo "[$JIRA_ID] $PREFIX: $MESSAGE" > "$1"
fi
